CLASS lhc_plist DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR plist RESULT result.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR plist RESULT result.

    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE plist.

    METHODS setstatuscomplete FOR MODIFY
      IMPORTING keys FOR ACTION plist~setstatuscomplete RESULT result.

    METHODS setinitialstatus FOR DETERMINE ON SAVE
      IMPORTING keys FOR plist~setinitialstatus.

    METHODS validateplate FOR VALIDATE ON SAVE
      IMPORTING keys FOR plist~validateplate.

    METHODS populatevehicledetails FOR DETERMINE ON MODIFY
      IMPORTING keys FOR plist~populatevehicledetails.

    METHODS createnewlicense FOR MODIFY
      IMPORTING keys FOR ACTION plist~createnewlicense.

    METHODS setcreatestatus FOR DETERMINE ON SAVE
      IMPORTING keys FOR plist~setcreatestatus.

    METHODS createnewcr FOR MODIFY
      IMPORTING keys FOR ACTION plist~createnewcr.

    METHODS mandatorycheck FOR VALIDATE ON SAVE
      IMPORTING keys FOR plist~mandatorycheck.

ENDCLASS.

CLASS lhc_plist IMPLEMENTATION.

  METHOD get_instance_features.
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
      ENTITY plist
        ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(lt_plist).

    data(lv_plist) = lt_plist[ 1 ]-plist.
    SELECT single * FROM zpl_tab_head_n INTO @data(ls_plist_saved) WHERE plist = @lv_plist.
      result = VALUE #( for ls_plist in lt_plist
                ( %tky = ls_plist-%tky
*                  %field-PlateNo = if_abap_behv=>fc-f-mandatory )
                  %field-PlateNo = COND #( WHEN ( ls_plist_saved-plate_no IS INITIAL )
                                           THEN if_abap_behv=>fc-f-mandatory ELSE if_abap_behv=>fc-f-read_only )
                  %field-EstChgReq = COND #( WHEN ( ls_plist_saved-plate_no IS NOT INITIAL )
                                           THEN if_abap_behv=>fc-f-read_only ) )

                ).
  ENDMETHOD.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD earlynumbering_create.
*   Generate numbers for active and draft modes
*   This should be replaced by a number range

    try.
    cl_numberrange_runtime=>number_get(
      EXPORTING
        nr_range_nr       = '01'
        object            = 'ZMG_PL'
      IMPORTING
        number            = data(lv_number)
        returncode        = data(lv_ret_code)
        returned_quantity = data(lv_ret_qty)
    ).
    CATCH cx_nr_object_not_found.
    CATCH cx_number_ranges.
    ENDTRY.
    DATA(lt_entities) = entities.
*    SELECT MAX(  plist ) FROM zpl_tab_head_n INTO @DATA(lv_max_plist).
*    SELECT max(  plist ) FROM zpl_tab_head_d into @DATA(lv_max_plist_d).
*    if lv_max_plist_d gt lv_max_plist.
*        lv_max_plist = lv_max_plist_d.
*    endif.
    data lv_max_plist TYPE numc10.
    lv_max_plist = lv_number - lv_ret_qty.
    LOOP AT lt_entities INTO DATA(ls_entity).
      IF ls_entity-plist IS INITIAL.
        lv_max_plist = lv_max_plist + 1.
        ls_entity-plist = |{ lv_max_plist ALPHA = IN }|.
      ENDIF.

      APPEND VALUE #( %cid = ls_entity-%cid
*        %is_draft = ls_entity-%is_draft
      plist = ls_entity-plist ) TO mapped-plist.
    ENDLOOP.
  ENDMETHOD.

  METHOD setstatuscomplete.
    data(lv_stat) = keys[ 1 ]-%param-status_act.
    SELECT SINGLE @abap_true INTO @data(lv_stat_exists) FROM zi_status_vh WHERE value_low = @lv_stat.
    if lv_stat_exists is INITIAL.
*       Updated failed data to framework
        APPEND VALUE #( %tky = keys[ 1 ]-%tky ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = |Invalid Status Value { lv_stat } Entered| ) ) TO reported-plist.
    else.
*   This is triggered from Update Status action,
*   Update the status with the value entered
    MODIFY ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
    ENTITY plist
       UPDATE
         FIELDS ( status )
         WITH VALUE #( FOR key IN keys
                         ( %tky         = key-%tky
                           status = key-%param-status_act ) )
    FAILED failed
    REPORTED reported.

*   Read the changed values and update result
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
      ENTITY plist
        ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(lt_plist).

    result = VALUE #( FOR ls_plist IN lt_plist
                        ( %tky   = ls_plist-%tky
                          %param = ls_plist ) ).
    ENDIF.
  ENDMETHOD.

  METHOD setinitialstatus.
*   Setting an initial status while creating
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
       ENTITY plist FIELDS ( status ) WITH CORRESPONDING #( keys )
       RESULT DATA(lt_plist).

    DELETE lt_plist WHERE status IS  NOT INITIAL.
    CHECK lt_plist IS NOT INITIAL.

    MODIFY ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
        ENTITY plist UPDATE FIELDS ( status )
        WITH VALUE #( FOR ls_plist IN lt_plist
                    ( %tky      = ls_plist-%tky
                      status    = 'R' ) )
        REPORTED DATA(update_reported).

    reported = CORRESPONDING #( DEEP update_reported ).
  ENDMETHOD.

  METHOD validateplate.
*   Check if the Plate number is already available in other procurement list item
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
    ENTITY plist
    FIELDS ( plateno )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_plist).


    LOOP AT lt_plist INTO DATA(ls_plist) WHERE plateno IS NOT INITIAL.
      SELECT SINGLE @abap_true FROM zmg_resid WHERE plate_no = @ls_plist-plateno INTO @DATA(lv_plate_exists).
        IF lv_plate_exists ne abap_true.
*       Updated failed data to framework
        APPEND VALUE #( %tky = ls_plist-%tky ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Invalid Plate Number') ) TO reported-plist.
      ENDIF.

      SELECT SINGLE @abap_true FROM zpl_tab_head_n WHERE plate_no = @ls_plist-plateno INTO @DATA(lv_plate_used).

      IF lv_plate_used = abap_true.
*       Updated failed data to framework
        APPEND VALUE #( %tky = ls_plist-%tky ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Plate Number Exists in Procurement List') ) TO reported-plist.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD populatevehicledetails.
*   Update the vehicle details from resource id and vehicle table based on the plate number entered
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
        ENTITY plist FIELDS ( plateno ) WITH CORRESPONDING #( keys )
        RESULT DATA(lt_plist).

    DELETE lt_plist WHERE plateno IS INITIAL.
    CHECK lt_plist IS NOT INITIAL.

    SELECT * FROM zi_resid_vehicle INTO TABLE @DATA(lt_vehicle)
             FOR ALL ENTRIES IN @lt_plist WHERE plateno = @lt_plist-plateno.

    MODIFY ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
        ENTITY plist UPDATE FIELDS ( owner actconfig )
        WITH VALUE #( FOR ls_plist IN lt_plist
                    LET ls_vehicle = VALUE #( lt_vehicle[ plateno = ls_plist-plateno ] OPTIONAL )
                    IN  owner = ls_vehicle-owner actconfig = ls_vehicle-actconfig
                    ( %tky      = ls_plist-%tky ) )
        REPORTED DATA(update_reported).

    reported = CORRESPONDING #( DEEP update_reported ).

  ENDMETHOD.

  METHOD CreateNewLicense.
*   This is triggered when clicked on the New From License button
*   This puts a blank instance with plate indicator to the table which helps the
*   Fiori Element to identify which field to display for creation

*   Begin of 15/09 - Logic added for plate number validation from the front screen
    if keys is NOT INITIAL.
       data(ls_key) = keys[ 1 ].
    endif.
    data lv_error TYPE char1.
    if ls_key-%param-PlateNoAct IS INITIAL.
*       Updated failed data to framework
        APPEND VALUE #( %cid = ls_key-%cid ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %cid = ls_key-%cid
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'No Plate Number Entered') ) TO reported-plist.
        lv_error = abap_true.
    else.
    SELECT SINGLE @abap_true FROM zmg_resid WHERE plate_no = @ls_key-%param-PlateNoAct INTO @DATA(lv_plate_exists).
        IF lv_plate_exists ne abap_true.
*       Updated failed data to framework
        APPEND VALUE #( %cid = ls_key-%cid ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %cid = ls_key-%cid
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Invalid Plate Number') ) TO reported-plist.
        lv_error = abap_true.
      ENDIF.

      SELECT SINGLE @abap_true FROM zpl_tab_head_n WHERE plate_no = @ls_key-%param-PlateNoAct INTO @DATA(lv_plate_used).

      IF lv_plate_used = abap_true.
*       Updated failed data to framework
        APPEND VALUE #( %cid = ls_key-%cid ) TO failed-plist.
*       Update message if the plate number exists
        APPEND VALUE #( %cid = ls_key-%cid
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Plate Number Exists in Procurement List') ) TO reported-plist.
        lv_error = abap_true.
      ENDIF.
      endif.
    if lv_error = ''.
*   End of 15/09 - validation logic
    modify entities of zi_pl_head_tp_n in local mode
        entity Plist
        create from value #( for <instance> in keys
                    ( %cid = <instance>-%cid
                      PlateNo = ls_key-%param-PlateNoAct
*                    PlateInd = abap_true
*                      %is_draft = if_abap_behv=>mk-on
*                      %control = VALUE #( PlateInd = if_abap_behv=>mk-on )
                      %control = VALUE #( PlateNo = if_abap_behv=>mk-on )
                      ) )

                    mapped mapped
                    failed failed
                    reported reported.
    endif.
  ENDMETHOD.

  METHOD SetCreateStatus.
*   This method updates the instance when the mandatory fields for both the type Plate or CR
*   are updated
*   This is required as we have a separate set of fields to be displayed for Update/Display mode
*    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
*       ENTITY plist FIELDS ( PlistFinal ) WITH CORRESPONDING #( keys )
*       RESULT DATA(lt_plist).
*
*    loop at lt_plist assigning field-symbol(<ls_plist>).
*        SELECT SINGLE @abap_true FROM zpl_tab_head WHERE plate_no = @<ls_plist>-plateno INTO @DATA(lv_plate_exists).
*        if lv_plate_exists IS INITIAL and ( <ls_plist>-PlateNo is not initial or <ls_plist>-EquipType is not initial ).
*            <ls_plist>-PlistFinal = abap_true.
*        endif.
*    endloop.


*    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
*       ENTITY plist FIELDS ( Status ) WITH CORRESPONDING #( keys )
*       RESULT DATA(lt_plist).
**   It also sets the status from Initiated to Created. Which can be changed further by Update Status action
*    MODIFY ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
*        ENTITY plist UPDATE FIELDS ( Status )
*        WITH VALUE #( FOR ls_plist IN lt_plist
*                    ( %tky      = ls_plist-%tky
**                      PlistFinal    = ls_plist-PlistFinal
*                      Status        = 'Created' ) )
*        REPORTED DATA(update_reported).
*
*    reported = CORRESPONDING #( DEEP update_reported ).
  ENDMETHOD.

  METHOD CreateNewCR.
*   This is triggered when clicked on the New From Change Req button
*   This puts a blank instance with change req indicator to the table which helps the
*   Fiori Element to identify which field to display for creation
*    modify entities of zi_pl_head_tp_n in local mode
*        entity Plist
*        create from value #( for <instance> in keys
*                    ( %cid = <instance>-%cid
**                    CRInd = abap_true
**                      %control = VALUE #( CRInd = if_abap_behv=>mk-on )
*                      ) )
*
*                    mapped mapped
*                    failed failed
*                    reported reported.
  ENDMETHOD.

  METHOD MandatoryCheck.
*   Validate if the mandatory fields are entered; Plate Number for New From Plate
*   and Equipment Type for New From Change Req
    READ ENTITIES OF zi_pl_head_tp_n IN LOCAL MODE
    ENTITY plist
    FIELDS ( plateno EquipType )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_plist).


    LOOP AT lt_plist INTO DATA(ls_plist).
      SELECT SINGLE @abap_true FROM zpl_tab_head_n WHERE plist = @ls_plist-plist INTO
        @DATA(lv_plate_exists).

      IF sy-subrc = 0 AND ls_plist-PlateNo IS INITIAL.
*       Updated failed data to the framework
        APPEND VALUE #( %tky = ls_plist-%tky ) TO failed-plist.
*       Update message for failed validation of plate number
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Plate Number is mandatory') ) TO reported-plist.
      ELSEIF sy-subrc = 0 AND ls_plist-PlateNo IS INITIAL AND ls_plist-EquipType IS INITIAL.
*       Update message for failed validation of Equipment Type
        APPEND VALUE #( %tky = ls_plist-%tky ) TO failed-plist.
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Equipment Type is mandatory') ) TO reported-plist.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


ENDCLASS.